{"version":3,"file":"components-post-PostListPage-PostListPage-stories.58f25e3e.iframe.bundle.js","mappings":";;;;AAUA;;;AAKA;;;;;;AAMA;;AAEA;;;;AAMA;AACA;;;;AAMA;;;;;;;;AAUA;;ACtBA;;;ACPA;AACA;;;;;;AAMA;;;;AChBA;;;;;AAKA;AACA;;;;;;;;AAQA","sources":["webpack://votogether/./src/components/post/PostListPage/style.ts","webpack://votogether/./src/components/post/PostListPage/index.tsx","webpack://votogether/./src/components/common/AddButton/style.ts","webpack://votogether/./src/components/common/Drawer/style.ts"],"sourcesContent":["import { Link } from 'react-router-dom';\n\nimport { styled } from 'styled-components';\n\nimport { theme } from '@styles/theme';\n\nexport const Container = styled.div`\n  padding-top: 55px;\n  position: relative;\n\n  @media (min-width: ${theme.breakpoint.sm}) {\n    padding-top: 0px;\n  }\n`;\n\nexport const HeaderWrapper = styled.div`\n  width: 100%;\n\n  position: fixed;\n  top: 0;\n\n  z-index: ${theme.zIndex.header};\n\n  @media (min-width: ${theme.breakpoint.sm}) {\n    display: none;\n    visibility: hidden;\n  }\n`;\n\nexport const DrawerWrapper = styled.div`\n  @media (min-width: ${theme.breakpoint.sm}) {\n    display: none;\n    visibility: hidden;\n  }\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: end;\n  gap: 20px;\n\n  position: sticky;\n  bottom: 24px;\n`;\n\nexport const AddButtonWrapper = styled(Link)`\n  text-decoration: none;\n`;\n","import { Suspense, useContext } from 'react';\n\nimport { AuthContext } from '@hooks/context/auth';\nimport { useCategoryList } from '@hooks/query/category/useCategoryList';\nimport { useDrawer } from '@hooks/useDrawer';\nimport { usePostRequestInfo } from '@hooks/usePostRequestInfo';\n\nimport ErrorBoundary from '@pages/ErrorBoundary';\n\nimport AddButton from '@components/common/AddButton';\nimport Dashboard from '@components/common/Dashboard';\nimport Drawer from '@components/common/Drawer';\nimport NarrowMainHeader from '@components/common/NarrowMainHeader';\nimport Skeleton from '@components/common/Skeleton';\nimport UpButton from '@components/common/UpButton';\nimport PostList from '@components/post/PostList';\n\nimport { PATH } from '@constants/path';\n\nimport { getSelectedState } from '@utils/post/getSelectedState';\nimport { scrollToTop } from '@utils/scrollToTop';\n\nimport * as S from './style';\n\nexport default function PostListPage() {\n  const { drawerRef, closeDrawer, openDrawer } = useDrawer('left');\n\n  const { isLoggedIn: isLogged, userInfo } = useContext(AuthContext).loggedInfo;\n  const { data: categoryList } = useCategoryList(isLogged);\n  const { postOptionalOption, postType } = usePostRequestInfo();\n  const { categoryId, keyword } = postOptionalOption;\n\n  const selectedState = getSelectedState({\n    categoryId,\n    keyword,\n    categoryList: categoryList ?? [],\n    postType,\n  });\n\n  const handleLogoutClick = () => {};\n\n  return (\n    <S.Container>\n      <S.HeaderWrapper>\n        <NarrowMainHeader handleMenuOpenClick={openDrawer} />\n      </S.HeaderWrapper>\n      <S.DrawerWrapper>\n        <Drawer handleDrawerClose={closeDrawer} placement=\"left\" width=\"225px\" ref={drawerRef}>\n          <Dashboard\n            userInfo={userInfo}\n            categoryList={categoryList ?? []}\n            handleLogoutClick={handleLogoutClick}\n            selectedState={selectedState}\n          />\n        </Drawer>\n      </S.DrawerWrapper>\n      <ErrorBoundary fallback={<div>에러발생</div>}>\n        <Suspense fallback={<Skeleton isLarge={true} />}>\n          <PostList />\n        </Suspense>\n      </ErrorBoundary>\n      <S.ButtonContainer>\n        <UpButton onClick={scrollToTop} />\n        <S.AddButtonWrapper to={PATH.POST_WRITE}>\n          <AddButton size=\"lg\" />\n        </S.AddButtonWrapper>\n      </S.ButtonContainer>\n    </S.Container>\n  );\n}\n","import { styled } from 'styled-components';\n\nimport { Size } from '@type/style';\n\ninterface ButtonProps {\n  size: Size;\n}\n\nconst SIZE = {\n  sm: { button: '25px', font: '13px' },\n  md: { button: '40px', font: '30px' },\n  lg: { button: '60px', font: '50px' },\n};\n\nexport const Button = styled.button<ButtonProps>`\n  display: block;\n\n  width: ${props => SIZE[props.size].button};\n  height: ${props => SIZE[props.size].button};\n  border-radius: 50%;\n\n  background-color: var(--primary-color);\n  color: var(--white);\n\n  font-size: ${props => SIZE[props.size].font};\n\n  cursor: pointer;\n`;\n","import { styled } from 'styled-components';\n\nimport { theme } from '@styles/theme';\n\nexport const Dialog = styled.dialog<{\n  $width: string;\n  $placement: 'left' | 'right';\n}>`\n  width: ${({ $width }) => $width};\n  min-height: 100%;\n\n  position: fixed;\n  top: 0;\n  left: ${({ $placement }) => ($placement === 'left' ? '0' : 'auto')};\n  right: ${({ $placement }) => ($placement === 'right' ? '0' : 'auto')};\n\n  overflow: hidden;\n\n  transition-property: transform;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n\n  z-index: ${theme.zIndex.modal};\n\n  &::backdrop {\n    background-color: rgba(0, 0, 0, 0.35);\n  }\n`;\n"],"names":[],"sourceRoot":""}