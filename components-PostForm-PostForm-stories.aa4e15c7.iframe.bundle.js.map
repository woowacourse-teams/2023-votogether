{"version":3,"file":"components-PostForm-PostForm-stories.aa4e15c7.iframe.bundle.js","mappings":";;;AASA;AAOA;;;;AAMA;;;;;;AAQA;;;AAKA;;AAIA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;AC7CA;;AAEA;;;AAKA;;;;;;AAQA;;;;;;;AAOA;;;;;;;AAOA;;;;;AAKA;;;AAKA;;;;AAIA;;;;;;AAMA;;AAIA;;;;;;;AAOA;;;;AAIA;;;;AAMA;;;;;;;;;;;;AAYA;;;;;AAKA;;;;AAMA;AACA;;;AAGA;AACA;AACA;;AAIA;;;;AAIA;;;AAKA;;;;;;;AAOA;;;AAKA;;;;;AAKA;;;AAKA;;;;;;AAMA;;;;AAMA;;;;AAMA;;;;;;;AASA;;;;;AAKA;;;;;;;;AAUA;;;;;;;;;;;AAaA;;;;;;;;;AAWA;;;;;;;;;;;AAaA;;;;;;;;ACpLA;;;AC1BA;AACA;;;;;;AAMA;;;;;;;ACRA;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;ACtBA;;;AAKA;;;;;;;;;;;;;AAeA;;;;AAMA;;AAIA;;;;;;;;AAUA;AACA;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;ACxDA;;;AAGA;AACA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;ACpBA;;;;;;;;AAQA;;;AAGA;;;;;;;;;ACpBA;;;;;;;AASA;;;;;;;;;AChBA;AAGA;;;;ACAA;AAGA;AACA;AAGA;;AAIA;;;ACVA;;;;;;;;;;AAYA;;;;;;AAQA;;;;;;;;;;;;AAYA;;;AAKA;;;;;AAOA;;;;;;AAQA;;;;AAMA;;;AAKA;;;;AAuBA;;;;;;;;;ACtFA","sources":["webpack://votogether/./src/components/PostForm/ContentImageSection/style.ts","webpack://votogether/./src/components/PostForm/style.ts","webpack://votogether/./src/components/PostForm/index.tsx","webpack://votogether/./src/components/common/AddButton/style.ts","webpack://votogether/./src/components/common/Modal/style.ts","webpack://votogether/./src/components/common/MultiSelect/style.ts","webpack://votogether/./src/components/common/SquareButton/style.ts","webpack://votogether/./src/components/common/TimePickerOptionList/TimePickerOption/style.ts","webpack://votogether/./src/components/common/TimePickerOptionList/style.ts","webpack://votogether/./src/components/optionList/WritingVoteOptionList/WritingVoteOption/OptionCancelButton/style.ts","webpack://votogether/./src/components/optionList/WritingVoteOptionList/WritingVoteOption/OptionUploadImageButton/style.ts","webpack://votogether/./src/components/optionList/WritingVoteOptionList/WritingVoteOption/style.ts","webpack://votogether/./src/components/optionList/WritingVoteOptionList/style.ts"],"sourcesContent":["import { styled } from 'styled-components';\n\nimport { Size } from '@type/style';\n\nexport const ContentImageContainer = styled.div`\n  display: grid;\n  grid-template-columns: 40px auto;\n`;\n\nconst imageSize = {\n  sm: '25%',\n  md: '50%',\n  lg: '100%',\n};\n\nexport const ContentImageWrapper = styled.div<{ $size: Size }>`\n  width: ${props => imageSize[props.$size]};\n  height: 100%;\n\n  position: relative;\n`;\n\nexport const ContentImage = styled.img`\n  width: 100%;\n  border-radius: 4px;\n\n  aspect-ratio: 1/1;\n  object-fit: cover;\n`;\n\nexport const FileInputContainer = styled.div`\n  width: 100%;\n  border-radius: 50%;\n`;\n\nexport const FileInput = styled.input`\n  visibility: hidden;\n`;\n\nexport const Label = styled.label<{ $isVisible: boolean }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  border: 2px solid var(--primary-color);\n  border-radius: 5px;\n  padding: 5px 0;\n\n  background-color: var(--primary-color);\n  color: var(--white);\n\n  font: var(--text-body);\n  text-align: center;\n\n  visibility: ${props => (props.$isVisible ? 'hidden' : '')};\n  cursor: pointer;\n`;\n","import { styled } from 'styled-components';\n\nimport { theme } from '@styles/theme';\n\nexport const HeaderWrapper = styled.div`\n  width: 100%;\n\n  position: fixed;\n  left: 0;\n\n  z-index: ${theme.zIndex.header};\n\n  @media (min-width: ${theme.breakpoint.sm}) {\n    display: none;\n  }\n`;\n\nexport const HeaderButton = styled.button`\n  width: 30px;\n\n  color: white;\n\n  cursor: pointer;\n`;\n\nexport const Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 20px;\n\n  padding: 70px 10px 20px 10px;\n\n  @media (min-width: ${theme.breakpoint.sm}) {\n    grid-template-columns: 2fr 1fr;\n    gap: 30px;\n\n    padding: 30px 40px 20px 40px;\n  }\n\n  @media (min-width: ${theme.breakpoint.md}) {\n    grid-template-columns: 1fr 300px;\n    padding: 30px 80px 20px 8cqb;\n  }\n\n  @media (min-width: ${theme.breakpoint.lg}) {\n    grid-template-columns: 1fr 400px;\n  }\n`;\n\nexport const LeftSide = styled.div<{ $hasImage: boolean }>`\n  display: flex;\n  flex-direction: column;\n\n  @media (min-width: ${theme.breakpoint.sm}) {\n    display: grid;\n    grid-template-rows: max-content max-content minmax(max-content, 1fr) max-content;\n\n    height: calc(100vh - 130px);\n\n    overflow-y: ${({ $hasImage }) => $hasImage && 'scroll'};\n  }\n`;\n\nexport const Title = styled.input`\n  padding: 10px;\n\n  color: gray;\n\n  font: var(--text-title);\n\n  @media (min-width: ${theme.breakpoint.md}) {\n    font-size: 2.4rem;\n  }\n\n  @media (min-width: ${theme.breakpoint.lg}) {\n    font-size: 2.8rem;\n    line-height: 3.6rem;\n  }\n`;\n\nexport const Content = styled.textarea`\n  min-height: 300px;\n  padding: 10px;\n  margin-bottom: 10px;\n\n  color: gray;\n\n  resize: none;\n\n  font: var(--text-caption);\n  font-family: 'Raleway', sans-serif;\n\n  @media (min-width: ${theme.breakpoint.md}) {\n    font-size: 1.8rem;\n    line-height: 2.4rem;\n  }\n\n  @media (min-width: ${theme.breakpoint.lg}) {\n    font-size: 2rem;\n    line-height: 2.8rem;\n  }\n`;\n\nexport const ContentImagePartWrapper = styled.div<{ $hasImage: boolean }>`\n  justify-self: ${props => props.$hasImage && 'center'};\n  height: 100%;\n\n  @media (min-width: ${theme.breakpoint.sm}) {\n    max-width: ${({ $hasImage }) => $hasImage && '800px'};\n    width: ${({ $hasImage }) => $hasImage && '80%'};\n  }\n`;\n\nexport const RightSide = styled.div`\n  display: grid;\n  grid-template-rows: auto max-content max-content;\n\n  @media (min-width: ${theme.breakpoint.sm}) {\n    height: calc(100vh - 130px);\n  }\n`;\n\nexport const OptionListWrapper = styled.div`\n  width: 100%;\n  padding-bottom: 10px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n\n  overflow-x: hidden;\n\n  @media (min-width: ${theme.breakpoint.sm}) {\n    overflow-y: auto;\n  }\n`;\n\nexport const Deadline = styled.div`\n  font: var(--text-body);\n  font-weight: bold;\n  text-align: center;\n\n  @media (min-width: ${theme.breakpoint.sm}) {\n    margin: 10px 0;\n  }\n`;\n\nexport const DeadlineDescription = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  margin: 10px 0;\n\n  @media (min-width: ${theme.breakpoint.sm}) {\n    margin: 10px 0;\n    min-height: 40px;\n  }\n`;\n\nexport const Description = styled.div`\n  color: gray;\n\n  font: var(--text-small);\n`;\n\nexport const ButtonWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(2, 46px);\n  gap: 10px;\n\n  margin-bottom: 30px;\n`;\n\nexport const SaveButtonWrapper = styled.div`\n  display: none;\n\n  visibility: hidden;\n\n  @media (min-width: ${theme.breakpoint.sm}) {\n    display: flex;\n\n    width: 100%;\n    height: 60px;\n\n    visibility: visible;\n  }\n`;\n\nexport const ModalHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  width: 100%;\n  border-bottom: 1px solid #f6f6f6;\n  padding: 10px;\n\n  font: var(--text-body);\n  font-weight: bold;\n`;\n\nexport const CloseButton = styled.button`\n  width: 25px;\n  height: 20px;\n\n  background: white;\n\n  font: var(--text-body);\n\n  cursor: pointer;\n`;\n\nexport const ModalBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: start;\n  align-items: center;\n  gap: 10px;\n\n  padding: 10px 0;\n\n  font: var(--text-caption);\n`;\n\nexport const ResetButtonWrapper = styled.div`\n  display: flex;\n\n  justify-content: center;\n  align-items: center;\n\n  width: 50%;\n  height: 40px;\n`;\n","import type { UseMutateFunction } from '@tanstack/react-query';\n\nimport React, { HTMLAttributes, useContext, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { PostInfo } from '@type/post';\n\nimport { AuthContext } from '@hooks/context/auth';\nimport { useCategoryList } from '@hooks/query/category/useCategoryList';\nimport { useContentImage } from '@hooks/useContentImage';\nimport { useMultiSelect } from '@hooks/useMultiSelect';\nimport { useText } from '@hooks/useText';\nimport { useToggle } from '@hooks/useToggle';\nimport { useWritingOption } from '@hooks/useWritingOption';\n\nimport Modal from '@components/common/Modal';\nimport MultiSelect from '@components/common/MultiSelect';\nimport NarrowTemplateHeader from '@components/common/NarrowTemplateHeader';\nimport SquareButton from '@components/common/SquareButton';\nimport TimePickerOptionList from '@components/common/TimePickerOptionList';\nimport WritingVoteOptionList from '@components/optionList/WritingVoteOptionList';\n\nimport { POST_DESCRIPTION_MAX_LENGTH, POST_TITLE_MAX_LENGTH } from '@constants/post';\n\nimport { changeCategoryToOption } from '@utils/post/changeCategoryToOption';\nimport { addTimeToDate, formatTimeWithOption } from '@utils/post/formatTime';\nimport { getDeadlineTime } from '@utils/post/getDeadlineTime';\n\nimport { DEADLINE_OPTION } from './constants';\nimport ContentImagePart from './ContentImageSection';\nimport * as S from './style';\n\ninterface PostFormProps extends HTMLAttributes<HTMLFormElement> {\n  data?: PostInfo;\n  mutate: UseMutateFunction<any, unknown, FormData, unknown>;\n  isError: boolean;\n  error: unknown;\n}\n\nconst MAX_TITLE_LENGTH = 100;\nconst MAX_CONTENT_LENGTH = 1000;\nconst CATEGORY_COUNT_LIMIT = 3;\n\nexport default function PostForm({ data, mutate, isError, error }: PostFormProps) {\n  const {\n    title,\n    content,\n    category: categoryIds,\n    createTime,\n    deadline,\n    voteInfo,\n    imageUrl,\n  } = data ?? {};\n\n  const navigate = useNavigate();\n  const writingOptionHook = useWritingOption(voteInfo?.options);\n  const contentImageHook = useContentImage(imageUrl);\n  const { isLogged } = useContext(AuthContext).loggedInfo;\n  const { data: categoryList } = useCategoryList(isLogged);\n\n  const { isOpen, openComponent, closeComponent } = useToggle();\n  const [time, setTime] = useState({\n    day: 0,\n    hour: 0,\n    minute: 0,\n  });\n  const baseTime = createTime ? new Date(createTime) : new Date();\n\n  const { text: writingTitle, handleTextChange: handleTitleChange } = useText(title ?? '');\n  const { text: writingContent, handleTextChange: handleContentChange } = useText(content ?? '');\n  const { selectedOptionList, handleOptionAdd, handleOptionDelete } = useMultiSelect(\n    categoryIds ?? [],\n    CATEGORY_COUNT_LIMIT\n  );\n\n  const categoryOptionList = changeCategoryToOption(categoryList ?? []);\n\n  const handleDeadlineButtonClick = (option: string) => {\n    setTime(formatTimeWithOption(option));\n  };\n\n  const handleResetButton = () => {\n    if (window.confirm('정말 초기화하시겠습니까?')) {\n      const updatedTime = {\n        day: 0,\n        hour: 0,\n        minute: 0,\n      };\n      setTime(updatedTime);\n    }\n  };\n\n  const handlePostFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData();\n\n    const imageUrlList = [\n      contentImageHook.contentImage,\n      ...writingOptionHook.optionList.map(option => option.imageUrl),\n    ];\n\n    if (e.target instanceof HTMLFormElement) {\n      const optionImageFileInputs =\n        e.target.querySelectorAll<HTMLInputElement>('input[type=\"file\"]');\n      const fileInputList: HTMLInputElement[] = [...optionImageFileInputs];\n      const contentImageFileList: File[] = [];\n      const optionImageFileList: File[] = [];\n      fileInputList.forEach((item, index) => {\n        if (!item.files) return;\n\n        if (imageUrlList[index] === '') {\n          index === 0\n            ? contentImageFileList.push(new File(['없는사진'], '없는사진.jpg'))\n            : optionImageFileList.push(new File(['없는사진'], '없는사진.jpg'));\n        } else {\n          index === 0\n            ? contentImageFileList.push(item.files[0])\n            : optionImageFileList.push(item.files[0]);\n        }\n      });\n\n      contentImageFileList.map(file => formData.append('contentImages', file));\n      optionImageFileList.map(file => formData.append('optionImages', file));\n\n      const writingOptionList = writingOptionHook.optionList.map(({ text, imageUrl }, index) => {\n        return { content: text, imageUrl: imageUrl };\n      });\n\n      const updatedPostTexts = {\n        categoryIds: selectedOptionList.map(option => option.id),\n        title: writingTitle ?? '',\n        imageUrl: imageUrl ?? '',\n        content: writingContent ?? '',\n        postOptions: writingOptionList,\n        deadline: addTimeToDate(time, baseTime),\n        // 글 수정의 경우 작성시간을 기준으로 마감시간 옵션을 더한다.\n        // 마감시간 옵션을 선택 안했다면 기존의 마감 시간을 유지한다.\n      };\n      formData.append('request', JSON.stringify(updatedPostTexts));\n\n      mutate(formData);\n\n      if (isError && error instanceof Error) {\n        alert(error.message);\n        return;\n      }\n\n      navigate('/');\n    }\n  };\n\n  return (\n    <>\n      <S.HeaderWrapper>\n        <NarrowTemplateHeader>\n          <S.HeaderButton onClick={() => navigate('/')}>취소</S.HeaderButton>\n          <S.HeaderButton type=\"submit\" form=\"form-post\">\n            저장\n          </S.HeaderButton>\n        </NarrowTemplateHeader>\n      </S.HeaderWrapper>\n      <form id=\"form-post\" onSubmit={handlePostFormSubmit}>\n        <S.Wrapper>\n          <S.LeftSide $hasImage={!!contentImageHook.contentImage}>\n            <MultiSelect\n              selectedOptionList={selectedOptionList}\n              optionList={categoryOptionList}\n              handleOptionAdd={handleOptionAdd}\n              handleOptionDelete={handleOptionDelete}\n              placeholder=\"카테고리를 선택해주세요.\"\n            />\n            <S.Title\n              value={writingTitle}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                handleTitleChange(e, POST_TITLE_MAX_LENGTH)\n              }\n              placeholder=\"제목을 입력해주세요\"\n              maxLength={MAX_TITLE_LENGTH}\n              required\n            />\n            <S.Content\n              value={writingContent}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                handleContentChange(e, POST_DESCRIPTION_MAX_LENGTH)\n              }\n              placeholder=\"내용을 입력해주세요\"\n              maxLength={MAX_CONTENT_LENGTH}\n              required\n            />\n            <S.ContentImagePartWrapper $hasImage={!!contentImageHook.contentImage}>\n              <ContentImagePart size=\"lg\" contentImageHook={contentImageHook} />\n            </S.ContentImagePartWrapper>\n          </S.LeftSide>\n          <S.RightSide>\n            <S.OptionListWrapper>\n              <WritingVoteOptionList writingOptionHook={writingOptionHook} />\n            </S.OptionListWrapper>\n            <S.Deadline>\n              <S.DeadlineDescription>\n                {getDeadlineTime({ hour: time.hour, day: time.day, minute: time.minute })}\n                {data && (\n                  <S.Description>\n                    글 작성일({createTime})로부터 하루 이후 (\n                    {addTimeToDate({ day: 1, hour: 0, minute: 0 }, baseTime)})까지만 선택\n                    가능합니다.\n                  </S.Description>\n                )}\n                {data && <S.Description>* 기존 마감 시간은 {deadline}입니다. </S.Description>}\n              </S.DeadlineDescription>\n              <S.ButtonWrapper>\n                {DEADLINE_OPTION.map(option => (\n                  <SquareButton\n                    aria-label={option}\n                    key={option}\n                    type=\"button\"\n                    onClick={() => handleDeadlineButtonClick(option)}\n                    theme=\"blank\"\n                  >\n                    {option}\n                  </SquareButton>\n                ))}\n                {\n                  <SquareButton type=\"button\" onClick={openComponent} theme=\"blank\">\n                    사용자 지정\n                  </SquareButton>\n                }\n              </S.ButtonWrapper>\n            </S.Deadline>\n            <S.SaveButtonWrapper>\n              <SquareButton theme=\"fill\" type=\"submit\" form=\"form-post\">\n                저장\n              </SquareButton>\n            </S.SaveButtonWrapper>\n          </S.RightSide>\n        </S.Wrapper>\n        {isOpen && (\n          <Modal size=\"sm\" onModalClose={closeComponent}>\n            <>\n              <S.ModalHeader>\n                <h3>마감 시간 선택</h3>\n                <S.CloseButton onClick={closeComponent}>X</S.CloseButton>\n              </S.ModalHeader>\n              <S.ModalBody>\n                <S.Description>최대 3일을 넘을 수 없습니다.</S.Description>\n                <TimePickerOptionList time={time} setTime={setTime} />\n                <S.ResetButtonWrapper>\n                  <SquareButton onClick={handleResetButton} type=\"button\" theme=\"blank\">\n                    초기화\n                  </SquareButton>\n                </S.ResetButtonWrapper>\n              </S.ModalBody>\n            </>\n          </Modal>\n        )}\n      </form>\n    </>\n  );\n}\n","import { styled } from 'styled-components';\n\nimport { Size } from '@type/style';\n\ninterface ButtonProps {\n  size: Size;\n}\n\nconst SIZE = {\n  sm: { button: '25px', font: '13px' },\n  md: { button: '40px', font: '30px' },\n  lg: { button: '60px', font: '50px' },\n};\n\nexport const Button = styled.button<ButtonProps>`\n  display: block;\n\n  width: ${props => SIZE[props.size].button};\n  height: ${props => SIZE[props.size].button};\n  border-radius: 50%;\n\n  background-color: var(--primary-color);\n  color: var(--white);\n\n  font-size: ${props => SIZE[props.size].font};\n\n  cursor: pointer;\n`;\n","import { styled } from 'styled-components';\n\nimport { Size } from '@type/style';\n\nconst MODAL_SIZE: Record<Size, string> = {\n  sm: '290px',\n  md: '590px',\n  lg: '700px',\n};\n\nexport const All = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  background: rgba(0, 0, 0, 0.35);\n`;\n\nexport const Container = styled.div<{ size: Size }>`\n  display: grid;\n  grid-template-rows: 1fr 6fr;\n\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: ${props => MODAL_SIZE[props.size]};\n  height: 290px;\n  border-radius: 12px;\n  border: 2px solid #f6f6f6;\n  padding: 5px;\n\n  background-color: white;\n\n  box-shadow: 0 0 6px 0 rgba(0, 0, 0, 0.5);\n`;\n","import { styled } from 'styled-components';\n\nimport { theme } from '@styles/theme';\n\nexport const Container = styled.div`\n  position: relative;\n\n  font: var(--text-caption);\n\n  & > * {\n    background-color: var(--white);\n  }\n\n  @media (min-width: ${theme.breakpoint.sm}) {\n    font: var(--text-body);\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 20px;\n  align-items: center;\n\n  height: auto;\n  border: 1px solid var(--slate);\n  border-radius: 6px;\n  padding: 7px;\n\n  position: relative;\n\n  cursor: pointer;\n`;\n\nexport const SelectedOptionListContainer = styled.div`\n  display: flex;\n  flex-grow: 1;\n  flex-wrap: wrap;\n`;\n\nexport const SelectIcon = styled.span`\n  width: 20px;\n`;\n\nexport const DropDown = styled.ul<{\n  $isOpened: boolean;\n}>`\n  width: 100%;\n  border: 1px solid #e4e5e7;\n  border-radius: 6px;\n  margin-top: 10px;\n\n  position: absolute;\n\n  opacity: ${({ $isOpened }) => ($isOpened ? 1 : 0)};\n  visibility: ${({ $isOpened }) => ($isOpened ? 'visible' : 'hidden')};\n\n  transition: all 0.2s linear 0.1s;\n\n  & > li {\n    list-style: none;\n    padding: 10px 0px 10px 15px;\n    border-bottom: 1px solid #e4e5e7;\n\n    &:hover {\n      background-color: #ffefd5;\n    }\n    &:last-child {\n      border-bottom: none;\n    }\n  }\n`;\n\nexport const SelectedOption = styled.span`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  border-radius: 4px;\n  padding: 10px;\n  margin: 2px 4px 2px 2px;\n  & > span {\n    margin-right: 8px;\n  }\n\n  background: #e8f7f6;\n`;\n\nexport const Image = styled.img<{ $isSelected: boolean }>`\n  width: 20px;\n  height: 20px;\n  border-left: 1px solid var(--slate);\n  padding-left: 8px;\n`;\n","import { styled } from 'styled-components';\n\nimport { theme } from '@styles/theme';\n\ninterface ButtonProps {\n  $theme: 'blank' | 'fill' | 'gray';\n}\n\nconst BORDER_THEME: Record<ButtonProps['$theme'], string> = {\n  fill: 'var(--primary-color)',\n  blank: 'var(--primary-color)',\n  gray: '#67727E',\n};\n\nconst TEXT_THEME: Record<ButtonProps['$theme'], string> = {\n  fill: 'white',\n  blank: 'var(--primary-color)',\n  gray: 'white',\n};\n\nconst BACKGROUND_THEME: Record<ButtonProps['$theme'], string> = {\n  fill: 'var(--primary-color)',\n  blank: 'white',\n  gray: '#67727E',\n};\n\nexport const Button = styled.button<ButtonProps>`\n  display: block;\n\n  width: 100%;\n  height: 100%;\n  border: 2px solid ${({ $theme }) => BORDER_THEME[$theme]};\n  border-radius: 8px;\n\n  color: ${({ $theme }) => TEXT_THEME[$theme]};\n  background-color: ${({ $theme }) => BACKGROUND_THEME[$theme]};\n\n  font: var(--text-caption);\n\n  cursor: pointer;\n\n  @media (min-width: ${theme.breakpoint.sm}) {\n    font: var(--text-body);\n  }\n`;\n","import { styled } from 'styled-components';\n\nexport const TimeBox = styled.div`\n  width: 33.3%;\n  height: 100px;\n  border: 1px solid white;\n\n  background-color: #f2f2f2;\n\n  text-align: center;\n\n  overflow: auto;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n`;\n\nexport const Time = styled.div<{ $isPicked: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  height: 50px;\n\n  background: ${props => (props.$isPicked ? '#F2F2F2' : 'var(--white)')};\n\n  font: var(--text-small);\n  font-weight: ${props => (props.$isPicked ? 'bold' : 'light')};\n`;\n","import { styled } from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: center;\n  gap: 15px;\n\n  width: 200px;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  border: 1px solid #f2f2f2;\n`;\n\nexport const PickedTimeText = styled.p`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  gap: 20px;\n\n  font: var(--text-body);\n  font-weight: bold;\n`;\n","import { styled } from 'styled-components';\n\nimport { ButtonCssText, IconImage } from '../style';\n\nexport const Container = styled.button`\n  ${ButtonCssText}\n`;\n\nexport const Image = styled(IconImage)``;\n","import { styled } from 'styled-components';\n\nimport { ButtonCssText, IconImage } from '../style';\n\nexport const Container = styled.div<{ $isVisible: boolean }>`\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  visibility: ${props => props.$isVisible && 'hidden'};\n`;\n\nexport const Label = styled.label`\n  ${ButtonCssText}\n`;\n\nexport const FileInput = styled.input`\n  visibility: hidden;\n`;\n\nexport const Image = styled(IconImage)``;\n","import { styled } from 'styled-components';\n\nimport { theme } from '@styles/theme';\n\nexport const Container = styled.li`\n  display: flex;\n  gap: 10px;\n`;\n\nexport const OptionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  width: 100%;\n  padding: 15px;\n  border-radius: 4px;\n\n  background-color: #e6e6e6;\n`;\n\nexport const ContentContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n\n  width: 100%;\n`;\n\nexport const ContentTextArea = styled.textarea`\n  width: 100%;\n  height: 90px;\n  padding: 8px;\n\n  font: var(--text-caption);\n  line-height: 2.4rem;\n\n  background-color: #e6e6e6;\n\n  resize: none;\n\n  @media (min-width: ${theme.breakpoint.md}) {\n    font: var(--text-body);\n  }\n`;\n\nexport const ImageContainer = styled.div`\n  width: 80%;\n  margin-top: 20px;\n\n  position: relative;\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  border-radius: 4px;\n\n  aspect-ratio: 1/1;\n  object-fit: cover;\n`;\n\nexport const ImageCancelWrapper = styled.div`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n`;\n\nexport const CancelButtonWrapper = styled.div`\n  width: 34px;\n  height: 100%;\n`;\n\nexport const ButtonCssText = `\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n\nwidth: 24px;\nheight: 24px;\nborder-radius: 50%;\n\nbackground-color: #bebebe;\n\ncursor: pointer;\n\n@media (min-width: ${theme.breakpoint.md}) {\n width:20px;\n height:20px;\n}\n`;\n\nexport const IconImage = styled.img`\n  width: 14px;\n  height: 14px;\n\n  @media (min-width: ${theme.breakpoint.md}) {\n    width: 16px;\n    height: 16px;\n  }\n`;\n","import { styled } from 'styled-components';\n\nexport const Container = styled.ul`\n  display: flex;\n  flex-direction: column;\n\n  gap: 20px;\n`;\n\nexport const AddButtonWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n\n  position: relative;\n`;\n"],"names":[],"sourceRoot":""}